%import common (C_COMMENT, CNAME, INT, SH_COMMENT, SQL_COMMENT, WS)

%ignore C_COMMENT
%ignore SH_COMMENT
%ignore SQL_COMMENT
%ignore WS

################################################################################
# Punctuation
################################################################################

DQUOT : "\""
MINUS : "-"
PLUS : "+"
SQUOT : "'"
_AMP : "&"
_ARROW : "=>"
_AT : "@"
_BACKTICK : "`"
_CARET : "^"
_COMMA : ","
_CONCAT : "||"
_DOT : "."
_EQ : "="
_FSLASH : "/"
_GT : ">"
_GTE : ">="
_LBRACK : "["
_LPAR : "("
_LT : "<"
_LTE : "<="
_MINUS : "-"
_NE : "!="
_PERC : "%"
_PIPE : "|"
_PIPE_OP : "|>"
_PLUS : "+"
_RBRACK : "]"
_RPAR : ")"
_SEMI : ";"
_STAR : "*"
_TILDE : "~"
_USCORE : "_"

################################################################################
# Keywords
################################################################################

# All keywords are case-insensitive

ALL : "ALL"i
ANY : "ANY"i
ASC : "ASC"i
CROSS : "CROSS"i
DESC : "DESC"i
DISTINCT : "DISTINCT"i
EXCEPT : "EXCEPT"i
FALSE : "FALSE"i
FIRST : "FIRST"i
FULL : "FULL"i
INNER : "INNER"i
INTERSECT : "INTERSECT"i
LAST : "LAST"i
LEFT : "LEFT"i
NULL : "NULL"i
OUTER : "OUTER"i
RANGE : "RANGE"i
RIGHT : "RIGHT"i
ROWS : "ROWS"i
SOME : "SOME"i
STRUCT : "STRUCT"i
TRUE : "TRUE"i
UNION : "UNION"i
VALUE : "VALUE"i
_AGGREGATE : "AGGREGATE"i
_AND : "AND"i
_ARRAY : "ARRAY"i
_AS : "AS"i
_BETWEEN : "BETWEEN"i
_BIGNUMERIC : "BIGNUMERIC"i
_BY : "BY"i
_CALL : "CALL"i
_CASE : "CASE"i
_CAST : "CAST"i
_CORRESPONDING : "CORRESPONDING"i
_CUBE : "CUBE"i
_CURRENT : "CURRENT"i
_DATE : "DATE"i
_DATETIME : "DATETIME"i
_DISTINCT : "DISTINCT"i
_DROP : "DROP"i
_ELSE : "ELSE"i
_END : "END"i
_EXCEPT : "EXCEPT"i
_EXCLUDE : "EXCLUDE"i
_EXISTS : "EXISTS"i
_EXTEND : "EXTEND"i
_FOLLOWING : "FOLLOWING"i
_FOR : "FOR"i
_FORMAT : "FORMAT"i
_FROM : "FROM"i
_GROUP : "GROUP"i
_GROUPING : "GROUPING"i
_HAVING : "HAVING"i
_IGNORE : "IGNORE"i
_INCLUDE : "INCLUDE"i
_IN : "IN"i
_INTERVAL : "INTERVAL"i
_IS : "IS"i
_JOIN : "JOIN"i
_JSON : "JSON"i
_LIKE : "LIKE"i
_LIMIT : "LIMIT"i
_MAX : "MAX"i
_MIN : "MIN"i
_NAME : "NAME"i
_NOT : "NOT"i
_NULLS : "NULLS"i
_NUMERIC : "NUMERIC"i
_OF : "OF"i
_OFFSET : "OFFSET"i
_ON : "ON"i
_OR : "OR"i
_ORDER : "ORDER"i
_OVER : "OVER"i
_PARTITION : "PARTITION"i
_PERCENT : "PERCENT"i
_PIVOT : "PIVOT"i
_PRECEDING : "PRECEDING"i
_RANGE : "RANGE"i
_RENAME : "RENAME"i
_REPLACE : "REPLACE"i
_RESPECT : "RESPECT"i
_ROLLUP : "ROLLUP"i
_ROW : "ROW"i
_SAFE_CAST : "SAFE_CAST"i
_SELECT : "SELECT"i
_SET : "SET"i
_SETS : "SETS"i
_STRICT : "STRICT"i
_STRUCT : "STRUCT"i
_SYSTEM : "SYSTEM"i
_SYSTEM_TIME : "SYSTEM_TIME"i
_TABLESAMPLE : "TABLESAMPLE"i
_THEN : "THEN"i
_TIME : "TIME"i
_TIMESTAMP : "TIMESTAMP"i
_UNBOUNDED : "UNBOUNDED"i
_UNNEST : "UNNEST"i
_UNPIVOT : "UNPIVOT"i
_USING : "USING"i
_WHEN : "WHEN"i
_WHERE : "WHERE"i
_WINDOW : "WINDOW"i
_WITH : "WITH"i

################################################################################
# Identifiers
################################################################################

# Ref: https://github.com/google/zetasql/blob/master/zetasql/parser/zetasql.tm
# Ref: https://github.com/google/zetasql/blob/master/zetasql/parser/flex_tokenizer.l

UNQUOTED_IDENT : CNAME
QUOTED_IDENT : _BACKTICK /[^`]+/ _BACKTICK

ident : UNQUOTED_IDENT | QUOTED_IDENT | keyword_as_ident

path_expression : ident ( _DOT ident )*

# This is the only case where we force inlining of terminals
!keyword_as_ident : "AGGREGATE"i
    | "BIGNUMERIC"i
    | "CALL"i
    | "CORRESPONDING"i
    | "DATE"i
    | "DATETIME"i
    | "DROP"i
    | "EXTEND"i
    | "FIRST"i
    | "FORMAT"i
    | "JSON"i
    | "LAST"i
    | "MAX"i
    | "MIN"i
    | "NAME"i
    | "NUMERIC"i
    | "OFFSET"i
    | "PERCENT"i
    | "PIVOT"i
    | "RENAME"i
    | "REPLACE"i
    | "ROW"i
    | "SAFE_CAST"i
    | "SEARCH"i
    | "SETS"i
    | "STRICT"i
    | "SYSTEM"i
    | "SYSTEM_TIME"i
    | "TABLE"i
    | "TIME"i
    | "TIMESTAMP"i
    | "UNPIVOT"i
    | "VALUE"i

parameter : _AT UNQUOTED_IDENT

################################################################################
# Types
################################################################################

type : raw_type type_parameters?

?raw_type : array_type | struct_type | type_name | range_type

array_type : _ARRAY _LT type _GT

struct_type : _STRUCT _LT struct_type_list _GT

struct_type_list : struct_field ( _COMMA struct_field )*

struct_field : ident type | type

type_name : path_expression | _INTERVAL

range_type : _RANGE _LT type _GT

type_parameters : _LPAR type_parameter ( _COMMA type_parameter )* _RPAR

type_parameter : integer_literal
    | boolean_literal
    | string_literal
    | bytes_literal
    | float_literal
    | "MAX"

################################################################################
# Literals
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#literals

?literal : string_literal
    | bytes_literal
    | integer_literal
    | numeric_literal
    | bignumeric_literal
    | float_literal
    | array_literal
    | struct_literal
    | named_struct_literal
    | date_literal
    | time_literal
    | datetime_literal
    | timestamp_literal
    | range_literal
    | interval_literal
    | json_literal
    | boolean_literal
    | null_literal

# Strings

string_literal : STRING_LITERAL

STRING_LITERAL : _STRING_LITERAL_PREFIX? _DQUOT_STRING_LITERAL
    | _STRING_LITERAL_PREFIX? _DQUOT3_STRING_LITERAL
    | _STRING_LITERAL_PREFIX? _SQUOT_STRING_LITERAL
    | _STRING_LITERAL_PREFIX? _SQUOT3_STRING_LITERAL

_STRING_LITERAL_PREFIX : "r"i

_DQUOT_STRING_LITERAL : DQUOT _STRING_LITERAL_INNER DQUOT

_DQUOT3_STRING_LITERAL : DQUOT DQUOT DQUOT _STRING_LITERAL_INNER DQUOT DQUOT DQUOT

_SQUOT_STRING_LITERAL : SQUOT _STRING_LITERAL_INNER SQUOT

_SQUOT3_STRING_LITERAL : SQUOT SQUOT SQUOT _STRING_LITERAL_INNER SQUOT SQUOT SQUOT

_STRING_LITERAL_INNER : /.*?/

# Bytes

bytes_literal : BYTES_LITERAL

BYTES_LITERAL : _BYTES_LITERAL_PREFIX _DQUOT_BYTES_LITERAL
    | _BYTES_LITERAL_PREFIX _DQUOT3_BYTES_LITERAL
    | _BYTES_LITERAL_PREFIX _SQUOT_BYTES_LITERAL
    | _BYTES_LITERAL_PREFIX _SQUOT3_BYTES_LITERAL

_BYTES_LITERAL_PREFIX : "rb"i | "br"i | "b"i

_DQUOT_BYTES_LITERAL : DQUOT _BYTES_LITERAL_INNER DQUOT

_DQUOT3_BYTES_LITERAL : DQUOT DQUOT DQUOT _BYTES_LITERAL_INNER DQUOT DQUOT DQUOT

_SQUOT_BYTES_LITERAL : SQUOT _BYTES_LITERAL_INNER SQUOT

_SQUOT3_BYTES_LITERAL : SQUOT SQUOT SQUOT _BYTES_LITERAL_INNER SQUOT SQUOT SQUOT

_BYTES_LITERAL_INNER : /.*?/

# Integers

integer_literal : INTEGER_LITERAL

INTEGER_LITERAL : /(0[Xx][0-9A-Fa-f]+|[0-9]+)/

# Numeric

numeric_literal : _NUMERIC STRING_LITERAL

bignumeric_literal : _BIGNUMERIC STRING_LITERAL

# Floats

float_literal : FLOAT_LITERAL

FLOAT_LITERAL : /[\+\-]?[0-9]+\.[0-9]*([Ee][\+\-]?[0-9]+)?/
    | /[\+\-]?[0-9]*\.[0-9]+([Ee][\+\-]?[0-9]+)?/
    | /[0-9]+[Ee][\+\-]?[0-9]+/

# Arrays

array_literal : array_literal_prefix? _LBRACK array_literal_item_list? _RBRACK

array_literal_item_list : column_expr ( _COMMA column_expr )*

array_literal_prefix : _ARRAY | array_type

# Date / time

date_literal : _DATE STRING_LITERAL

time_literal : _TIME STRING_LITERAL

datetime_literal : _DATETIME STRING_LITERAL

timestamp_literal : _TIMESTAMP STRING_LITERAL

# Range

range_literal : range_type range_value

range_value : STRING_LITERAL

# Interval

interval_literal : _INTERVAL column_expr datetime_part

datetime_part : UNQUOTED_IDENT

# JSON

json_literal : _JSON STRING_LITERAL

# Structs

struct_literal : _LPAR column_expr _COMMA column_expr ( _COMMA column_expr )* _RPAR

named_struct_literal : named_struct_literal_prefix _LPAR named_struct_literal_item_list _RPAR

named_struct_literal_prefix : ( _STRUCT | struct_type )

named_struct_literal_item_list : named_struct_literal_item ( _COMMA named_struct_literal_item )*

named_struct_literal_item : column_expr as_alias?

# Boolean

boolean_literal : TRUE | FALSE

# Null

null_literal : NULL

################################################################################
# Expressions
################################################################################

# We force precedence with only one alternative per rule, in a big chain that
# runs from lowest to highest precedence
# We pull out a separate rule for all operators w / higher precedence than AND
# to deal with semantic ambiguity in `BETWEEN` and disambiguate different flavors
# of parenthesized forms
# This structure closely follows the expression tree in ZetaSQL

?column_expr: and_expr | column_expr _OR and_expr -> or_expr

?and_expr : prec_higher_than_and_expr | and_expr _AND prec_higher_than_and_expr

?prec_higher_than_and_expr : maybe_parenthesized_expr | subquery

?maybe_parenthesized_expr : unparenthesized_prec_higher_than_and_expr | parenthesized_expr

# In other words, parens used for grouping expressions, but not subqueries
parenthesized_expr : _LPAR maybe_parenthesized_not_a_query_expr _RPAR

?maybe_parenthesized_not_a_query_expr : unparenthesized_prec_higher_than_and_expr
    | parenthesized_expr
    | column_expr _OR and_expr -> or_expr
    | and_expr _AND prec_higher_than_and_expr -> and_expr

# This begins the chain of operators / atoms
?unparenthesized_prec_higher_than_and_expr : is_distinct_from_expr
    | _NOT prec_higher_than_and_expr -> not_expr

?is_distinct_from_expr : is_not_expr
    | prec_higher_than_and_expr _IS _DISTINCT _FROM prec_higher_than_and_expr

?is_not_expr : is_expr
    | prec_higher_than_and_expr _IS _NOT ( boolean_literal | null_literal )

?is_expr : not_in_expr
    | prec_higher_than_and_expr _IS ( boolean_literal | null_literal )

?not_in_expr : in_expr
    | prec_higher_than_and_expr _NOT _IN ( parenthesized_in_rhs | subquery | unnest_expr )

?parenthesized_in_rhs : parenthesized_expr | parenthesized_list

parenthesized_list : _LPAR column_expr _COMMA column_expr ( _COMMA column_expr )* _RPAR

?in_expr : not_between_expr
    | prec_higher_than_and_expr _IN ( parenthesized_in_rhs | subquery | unnest_expr )

?not_between_expr : between_expr
    | prec_higher_than_and_expr _NOT _BETWEEN prec_higher_than_and_expr _AND prec_higher_than_and_expr

?between_expr : not_qlike_expr
    | prec_higher_than_and_expr _BETWEEN prec_higher_than_and_expr _AND prec_higher_than_and_expr

?not_qlike_expr : qlike_expr
    | prec_higher_than_and_expr _NOT _LIKE qlike_quantifier ( parenthesized_list | unnest_expr )

qlike_quantifier : ANY | SOME | ALL

?qlike_expr : not_like_expr
    | prec_higher_than_and_expr _LIKE qlike_quantifier ( parenthesized_list | unnest_expr )

?not_like_expr : like_expr
    | prec_higher_than_and_expr _NOT _LIKE prec_higher_than_and_expr

?like_expr : ne_expr
    | prec_higher_than_and_expr _LIKE prec_higher_than_and_expr

?ne_expr : gte_expr
    | prec_higher_than_and_expr ( _NE | _LT _GT) prec_higher_than_and_expr

?gte_expr : lte_expr
    | prec_higher_than_and_expr _GTE prec_higher_than_and_expr

?lte_expr : gt_expr
    | prec_higher_than_and_expr _LTE prec_higher_than_and_expr

?gt_expr : lt_expr
    | prec_higher_than_and_expr _GT prec_higher_than_and_expr

?lt_expr : eq_expr
    | prec_higher_than_and_expr _LT prec_higher_than_and_expr

?eq_expr : bitwise_or_expr
    | prec_higher_than_and_expr _EQ prec_higher_than_and_expr

?bitwise_or_expr : bitwise_xor_expr | prec_higher_than_and_expr _PIPE prec_higher_than_and_expr

?bitwise_xor_expr : bitwise_and_expr | prec_higher_than_and_expr _CARET prec_higher_than_and_expr

?bitwise_and_expr : bitwise_shr_expr | prec_higher_than_and_expr _AMP prec_higher_than_and_expr

?bitwise_shr_expr : bitwise_shl_expr | prec_higher_than_and_expr _GT _GT prec_higher_than_and_expr

?bitwise_shl_expr : sub_expr | prec_higher_than_and_expr _LT _LT prec_higher_than_and_expr

?sub_expr : add_expr | prec_higher_than_and_expr _MINUS prec_higher_than_and_expr

?add_expr : concat_expr | prec_higher_than_and_expr _PLUS prec_higher_than_and_expr

?concat_expr : div_expr | prec_higher_than_and_expr _CONCAT prec_higher_than_and_expr

?div_expr : mul_expr | prec_higher_than_and_expr _FSLASH prec_higher_than_and_expr

?mul_expr : bitwise_not_expr_ | prec_higher_than_and_expr _STAR prec_higher_than_and_expr

?bitwise_not_expr_ : uminus_expr_ | _TILDE prec_higher_than_and_expr -> bitwise_not_expr

?uminus_expr_ : uplus_expr_ | _MINUS prec_higher_than_and_expr -> uminus_expr

?uplus_expr_ : subscript_expr | _PLUS prec_higher_than_and_expr -> uplus_expr

?subscript_expr : field_access_expr | prec_higher_than_and_expr _LBRACK column_expr _RBRACK

?field_access_expr : atom_expr | prec_higher_than_and_expr _DOT ident

# Now we don't really care about precedence anymore
?atom_expr : literal
    | cast_expr
    | conditional_expr
    | function_call_expr
    | keyword_subquery_expr
    | parameter
    | ident

# CAST / SAFE_CAST

cast_expr : _CAST _LPAR cast_expr_target cast_expr_format? _RPAR -> cast_expr_kind_cast
    | _SAFE_CAST _LPAR cast_expr_target cast_expr_format? _RPAR -> cast_expr_kind_safe_cast

cast_expr_target : column_expr _AS ident

cast_expr_format : _FORMAT string_literal

# CASE

?conditional_expr : case_match_expr | case_expr

case_match_expr : _CASE column_expr when_then_expr+ else_expr? _END

case_expr : _CASE when_then_expr+ else_expr? _END

when_then_expr : _WHEN column_expr _THEN column_expr

else_expr : _ELSE column_expr

# Functions

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-reference
# Ref: https://github.com/lark-parser/lark/blob/master/lark/grammars/python.lark#L145-L146
function_call_expr : function_name function_args? nulls_modifier? having_modifier? order_by_modifier? limit_modifier? _RPAR ( _OVER window_expr )?

function_name : field_access_expr _LPAR function_distinct?

function_distinct : _DISTINCT

function_args : star_arg | pos_arg ( _COMMA pos_arg )* ( _COMMA named_arg )* | named_arg ( _COMMA named_arg )*

star_arg : _STAR

pos_arg : column_expr

named_arg : ident _ARROW column_expr

nulls_modifier : nulls_modifier_kind _NULLS

nulls_modifier_kind : _IGNORE -> ignore_nulls | _RESPECT -> respect_nulls

having_modifier : _HAVING having_modifier_kind column_expr

having_modifier_kind : _MIN -> having_min | _MAX -> having_max

order_by_modifier : _ORDER _BY order_by_items

order_by_items : order_by_item ( _COMMA order_by_item )* _COMMA?

order_by_item : column_expr order_by_item_sort? order_by_item_nulls?

order_by_item_sort : ASC | DESC

order_by_item_nulls : _NULLS ( FIRST | LAST )

limit_modifier : _LIMIT column_expr

keyword_subquery_expr : _ARRAY _LPAR query_expr _RPAR -> array_subquery_expr
    | _EXISTS _LPAR query_expr _RPAR -> exists_subquery_expr

# Window specification

window_spec : _LPAR ident? window_partition_by? window_order_by? window_frame? _RPAR

window_partition_by : _PARTITION _BY column_expr ( _COMMA column_expr )*

window_order_by : _ORDER _BY order_by_items

window_frame : window_frame_kind ( window_frame_start | _BETWEEN window_frame_between )

window_frame_kind : ROWS | RANGE

window_frame_start : window_frame_unbounded_preceding
    | window_frame_numeric_preceding
    | window_frame_current_row

window_frame_unbounded_preceding : _UNBOUNDED _PRECEDING

window_frame_numeric_preceding : column_expr _PRECEDING

window_frame_current_row : _CURRENT _ROW

window_frame_between : window_frame_between_unbounded_preceding
    | window_frame_between_numeric_preceding
    | window_frame_between_current_row
    | window_frame_between_numeric_following

window_frame_between_unbounded_preceding : window_frame_unbounded_preceding _AND window_frame_between_end_a

window_frame_between_numeric_preceding : window_frame_numeric_preceding _AND window_frame_between_end_a

window_frame_between_current_row : window_frame_current_row _AND window_frame_between_end_b

window_frame_between_numeric_following : window_frame_numeric_following _AND window_frame_between_end_c

window_frame_numeric_following : column_expr _FOLLOWING

?window_frame_between_end_a : window_frame_numeric_preceding
    | window_frame_current_row
    | window_frame_numeric_following
    | window_frame_unbounded_following

window_frame_unbounded_following : _UNBOUNDED _FOLLOWING

?window_frame_between_end_b : window_frame_current_row
    | window_frame_numeric_following
    | window_frame_unbounded_following

?window_frame_between_end_c : window_frame_numeric_following
    | window_frame_unbounded_following

################################################################################
# Entry point
################################################################################

?start_query : query
?start_pipe : pipe_expr
?start_expr : column_expr

################################################################################
# Query
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#sql_syntax

?query : query_expr ( _SEMI query_expr )* _SEMI?

?query_start : select
    | aliased_subquery
    | pipe_from

?aliased_subquery : subquery as_alias_as_required?

subquery : _LPAR query_expr _RPAR | _LPAR subquery _RPAR

pipe_from : _FROM from_clause

query_expr : query_start pipe_expr*

?pipe_expr : _PIPE_OP pipe_operator

################################################################################
# SELECT
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#select_list

select : _SELECT select_mode? select_shape? select_list select_from?

select_mode : ALL | DISTINCT

select_shape : _AS ( STRUCT | VALUE )

# See https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#trailing_commas
select_list : select_item ( _COMMA select_item )* _COMMA?

?select_item : select_star | select_dot_star | select_expr

select_star : _STAR select_except? select_replace?

select_except : _EXCEPT _LPAR select_except_list _RPAR

select_except_list : select_except_item ( _COMMA select_except_item )*

select_except_item : ident

select_replace : _REPLACE _LPAR select_replace_list _RPAR

select_replace_list : select_replace_item ( _COMMA select_replace_item )*

select_replace_item : column_expr _AS ident

select_dot_star : prec_higher_than_and_expr _DOT _STAR select_except? select_replace?

select_expr : column_expr as_alias?

as_alias : [ _AS ] ident

################################################################################
# FROM
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#from_clause

?select_from : _FROM from_clause

from_clause : from_item

?from_item : path_expression as_alias? time_travel? -> from_item_table
    | from_item_subquery
    | from_item_unnest

from_item_subquery : subquery as_alias?

time_travel : _FOR _SYSTEM_TIME _AS _OF column_expr

from_item_unnest : unnest_expr as_alias? from_unnest_offset_expr?

unnest_expr : _UNNEST _LPAR column_expr _RPAR

from_unnest_offset_expr : _WITH _OFFSET as_alias?

################################################################################
# Pipe
################################################################################

?pipe_operator : pipe_select
    | pipe_extend
    | pipe_set
    | pipe_drop
    | pipe_rename
    | pipe_as
    | pipe_where
    | pipe_limit
    | pipe_agg
    | pipe_order_by
    | pipe_set_operation
    | pipe_join
    | pipe_call
    | pipe_tablesample
    | pipe_pivot
    | pipe_unpivot

# SELECT

pipe_select : _SELECT select_shape? select_list window_clause?

# EXTEND

pipe_extend : _EXTEND pipe_selection_item_list window_clause?

pipe_selection_item_list : pipe_selection_item ( _COMMA pipe_selection_item )* _COMMA?

pipe_selection_item : select_expr | select_dot_star

# WINDOW

window_clause : _WINDOW window_item ( _COMMA window_item )* _COMMA?

window_item : ident _AS window_expr

window_expr : ident -> named_window | window_spec

# SET

pipe_set : _SET set_list

set_list : set_item ( _COMMA set_item )* _COMMA?

set_item : ident _EQ column_expr

# DROP

pipe_drop : _DROP drop_list

drop_list : drop_item ( _COMMA drop_item )* _COMMA?

drop_item : ident

# RENAME

pipe_rename : _RENAME rename_list

rename_list : rename_item ( _COMMA rename_item )* _COMMA?

rename_item : ident as_alias

# AS

pipe_as : _AS ident

# WHERE

pipe_where : _WHERE column_expr

# LIMIT

pipe_limit :  limit_expr offset_expr?

limit_expr : _LIMIT column_expr

offset_expr : _OFFSET column_expr

# AGGREGATE

pipe_agg : _AGGREGATE pipe_selection_item_list_with_order? group_by?

pipe_selection_item_list_with_order : pipe_selection_item_with_order ( _COMMA pipe_selection_item_with_order )* _COMMA?

pipe_selection_item_with_order : pipe_selection_item order_by_item_sort? order_by_item_nulls?

# GROUP BY

group_by : _GROUP group_by_and_order_by? _BY grouping_items

group_by_and_order_by : _AND _ORDER

grouping_items :  grouping_item ( _COMMA grouping_item )* _COMMA?

grouping_item : grouping_item_empty
    | column_expr as_alias? order_by_item_sort? order_by_item_nulls?
    | rollup_list
    | cube_list
    | grouping_set_list

grouping_item_empty : _LPAR _RPAR

as_alias_as_required : _AS ident

rollup_list : _ROLLUP _LPAR rollup_item ( _COMMA rollup_item )* _RPAR

rollup_item : column_expr

cube_list : _CUBE _LPAR cube_item ( _COMMA cube_item )* _RPAR

cube_item : column_expr

grouping_set_list : _GROUPING _SETS _LPAR grouping_set ( _COMMA grouping_set )* _RPAR

grouping_set : grouping_item_empty
    | column_expr
    | rollup_list
    | cube_list

# ORDER BY

pipe_order_by : _ORDER _BY order_by_items

# Set operations

pipe_set_operation : set_operation

set_operation : set_operation_metadata set_operation_list

set_operation_metadata : set_operation_criteria? set_operation_kind set_operation_mode set_operation_modifier?

set_operation_kind : UNION | INTERSECT | EXCEPT

set_operation_mode : ALL | DISTINCT

set_operation_list : subquery ( _COMMA subquery )* _COMMA?

?set_operation_modifier : set_operation_modifier_by_name
    | set_operation_modifier_corresponding
    | set_operation_modifier_strict_corresponding

set_operation_modifier_by_name : _BY _NAME ( _ON set_operation_columns )?

set_operation_modifier_corresponding : _CORRESPONDING ( _BY set_operation_columns )?

set_operation_modifier_strict_corresponding : _STRICT _CORRESPONDING ( _BY set_operation_columns )?

set_operation_columns : _LPAR ident ( _COMMA ident )* _RPAR

set_operation_criteria : INNER
    | FULL OUTER?
    | LEFT OUTER?
    | OUTER

# JOIN

pipe_join : join_criteria? _JOIN from_item as_alias? on_or_using_clause?

join_criteria : CROSS | INNER | FULL OUTER? | LEFT OUTER? | RIGHT OUTER?

on_or_using_clause : on_clause | using_clause

on_clause : _ON column_expr

using_clause : _USING _LPAR ident ( _COMMA ident )* _RPAR

# CALL

# TODO: TVF function calls are special, but this doesn't seem important yet
pipe_call : _CALL function_call_expr as_alias?

# TABLESAMPLE

# TODO: There may be more features here in the future
pipe_tablesample : _TABLESAMPLE _SYSTEM _LPAR tablesample_perc _RPAR

tablesample_perc : column_expr _PERCENT

# PIVOT

pipe_pivot : _PIVOT _LPAR pivot_clause _RPAR as_alias?

pivot_clause : pivot_item_list _FOR path_expression _IN _LPAR pivot_value_list _RPAR

pivot_item_list : pivot_item ( _COMMA pivot_item )*

pivot_item : column_expr as_alias?

pivot_value_list : pivot_value_item ( _COMMA pivot_value_item )*

pivot_value_item : column_expr as_alias?

# UNPIVOT

pipe_unpivot : _UNPIVOT unpivot_nulls_modifier? _LPAR unpivot_clause _RPAR as_alias?

unpivot_nulls_modifier : unpivot_nulls_modifier_kind _NULLS

unpivot_nulls_modifier_kind : _INCLUDE -> include_nulls | _EXCLUDE -> exclude_nulls

unpivot_clause : path_expression_list _FOR path_expression _IN unpivot_value_list

path_expression_list : path_expression | _LPAR path_expression ( _COMMA path_expression )* _RPAR

unpivot_value_list : unpivot_value_item | _LPAR unpivot_value_item ( _COMMA unpivot_value_item )* _RPAR

unpivot_value_item : path_expression_list unpivot_value_item_alias?

unpivot_value_item_alias : [ _AS ] ( string_literal | integer_literal )