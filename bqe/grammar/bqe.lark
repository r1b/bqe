%import common (CNAME, INT, WS)

%ignore WS

################################################################################
# Punctuation
################################################################################

DQUOT : "\""
MINUS : "-"
PLUS : "+"
SQUOT : "'"
_AMP : "&"
_ARROW : "=>"
_AT : "@"
_BACKTICK : "`"
_CARET : "^"
_COMMA : ","
_CONCAT : "||"
_DOT : "."
_EQ : "="
_FSLASH : "/"
_GT : ">"
_GTE : ">="
_LBRACK : "["
_LPAR : "("
_LT : "<"
_LTE : "<="
_MINUS : "-"
_NE : "!="
_NE_VAR : "<>"
_PERC : "%"
_PIPE : "|"
_PIPE_OP : "|>"
_PLUS : "+"
_RBRACK : "]"
_RPAR : ")"
_SEMI : ";"
_SHL : "<<"
_SHR : ">>"
_STAR : "*"
_TILDE : "~"
_USCORE : "_"

################################################################################
# Keywords
################################################################################

# All keywords are case-insensitive

ALL : "ALL"i
ANY : "ANY"i
ASC : "ASC"i
CROSS : "CROSS"i
DESC : "DESC"i
DISTINCT : "DISTINCT"i
EXCEPT : "EXCEPT"i
FALSE : "FALSE"i
FIRST : "FIRST"i
FULL : "FULL"i
INNER : "INNER"i
INTERSECT : "INTERSECT"i
LAST : "LAST"i
LEFT : "LEFT"i
NULL : "NULL"i
OUTER : "OUTER"i
RANGE : "RANGE"i
RIGHT : "RIGHT"i
ROWS : "ROWS"i
SOME : "SOME"i
STRUCT : "STRUCT"i
TRUE : "TRUE"i
UNION : "UNION"i
VALUE : "VALUE"i
_AGGREGATE : "AGGREGATE"i
_AND : "AND"i
_ARRAY : "ARRAY"i
_AS : "AS"i
_BETWEEN : "BETWEEN"i
_BIGNUMERIC : "BIGNUMERIC"i
_BY : "BY"i
_CALL : "CALL"i
_CORRESPONDING : "CORRESPONDING"i
_CUBE : "CUBE"i
_CURRENT : "CURRENT"i
_DATE : "DATE"i
_DATETIME : "DATETIME"i
_DISTINCT : "DISTINCT"i
_DROP : "DROP"i
_EXISTS : "EXISTS"i
_EXTEND : "EXTEND"i
_FOLLOWING : "FOLLOWING"i
_FOR : "FOR"i
_FROM : "FROM"i
_GROUP : "GROUP"i
_GROUPING : "GROUPING"i
_HAVING : "HAVING"i
_IGNORE : "IGNORE"i
_IN : "IN"i
_INTERVAL : "INTERVAL"i
_IS : "IS"i
_JOIN : "JOIN"i
_JSON : "JSON"i
_LIKE : "LIKE"i
_LIMIT : "LIMIT"i
_MAX : "MAX"i
_MIN : "MIN"i
_NAME : "NAME"i
_NOT : "NOT"i
_NULLS : "NULLS"i
_NUMERIC : "NUMERIC"i
_OF : "OF"i
_OFFSET : "OFFSET"i
_ON : "ON"i
_OR : "OR"i
_ORDER : "ORDER"i
_OVER : "OVER"i
_PARTITION : "PARTITION"i
_PERCENT : "PERCENT"i
_PIVOT : "PIVOT"i
_PRECEDING : "PRECEDING"i
_RANGE : "RANGE"i
_RENAME : "RENAME"i
_RESPECT : "RESPECT"i
_ROLLUP : "ROLLUP"i
_ROW : "ROW"i
_SELECT : "SELECT"i
_SET : "SET"i
_SETS : "SETS"i
_STRICT : "STRICT"i
_SYSTEM : "SYSTEM"i
_TABLESAMPLE : "TABLESAMPLE"i
_TIME : "TIME"i
_TIMESTAMP : "TIMESTAMP"i
_UNBOUNDED : "UNBOUNDED"i
_UNNEST : "UNNEST"i
_UNPIVOT : "UNPIVOT"i
_USING : "USING"i
_WHERE : "WHERE"i
_WINDOW : "WINDOW"i
_WITH : "WITH"i

################################################################################
# Identifiers
################################################################################

# Ref: https://github.com/google/zetasql/blob/master/zetasql/parser/zetasql.tm
# Ref: https://github.com/google/zetasql/blob/master/zetasql/parser/flex_tokenizer.l

UNQUOTED_IDENT : CNAME
QUOTED_IDENT : _BACKTICK /[^`]+/ _BACKTICK

ident : UNQUOTED_IDENT | QUOTED_IDENT

path_expression : ident | path_expression _DOT ident

parameter : _AT UNQUOTED_IDENT

################################################################################
# Literals
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#literals

?literal : string_literal
    | bytes_literal
    | integer_literal
    | numeric_literal
    | bignumeric_literal
    | float_literal
    | array_literal
    | struct_literal
    | date_literal
    | time_literal
    | datetime_literal
    | timestamp_literal
    | range_literal
    | interval_literal
    | json_literal
    | boolean_literal
    | null_literal

# Strings

string_literal : STRING_LITERAL

STRING_LITERAL : _STRING_LITERAL_PREFIX? _DQUOT_STRING_LITERAL
    | _STRING_LITERAL_PREFIX? _DQUOT3_STRING_LITERAL
    | _STRING_LITERAL_PREFIX? _SQUOT_STRING_LITERAL
    | _STRING_LITERAL_PREFIX? _SQUOT3_STRING_LITERAL

_STRING_LITERAL_PREFIX : "r"i

_DQUOT_STRING_LITERAL : DQUOT _STRING_LITERAL_INNER DQUOT

_DQUOT3_STRING_LITERAL : DQUOT DQUOT DQUOT _STRING_LITERAL_INNER DQUOT DQUOT DQUOT

_SQUOT_STRING_LITERAL : SQUOT _STRING_LITERAL_INNER SQUOT

_SQUOT3_STRING_LITERAL : SQUOT SQUOT SQUOT _STRING_LITERAL_INNER SQUOT SQUOT SQUOT

_STRING_LITERAL_INNER : /.*?/

# Bytes

bytes_literal : BYTES_LITERAL

BYTES_LITERAL : _BYTES_LITERAL_PREFIX _DQUOT_BYTES_LITERAL
    | _BYTES_LITERAL_PREFIX _DQUOT3_BYTES_LITERAL
    | _BYTES_LITERAL_PREFIX _SQUOT_BYTES_LITERAL
    | _BYTES_LITERAL_PREFIX _SQUOT3_BYTES_LITERAL

_BYTES_LITERAL_PREFIX : "rb"i | "br"i | "b"i

_DQUOT_BYTES_LITERAL : DQUOT _BYTES_LITERAL_INNER DQUOT

_DQUOT3_BYTES_LITERAL : DQUOT DQUOT DQUOT _BYTES_LITERAL_INNER DQUOT DQUOT DQUOT

_SQUOT_BYTES_LITERAL : SQUOT _BYTES_LITERAL_INNER SQUOT

_SQUOT3_BYTES_LITERAL : SQUOT SQUOT SQUOT _BYTES_LITERAL_INNER SQUOT SQUOT SQUOT

_BYTES_LITERAL_INNER : /.*?/

# Integers

integer_literal : INTEGER_LITERAL

INTEGER_LITERAL : /[\+\-]?(0[Xx][0-9A-Fa-f]+|[0-9]+)/

# Numeric

numeric_literal : _NUMERIC STRING_LITERAL

bignumeric_literal : _BIGNUMERIC STRING_LITERAL

# Floats

float_literal : FLOAT_LITERAL

FLOAT_LITERAL : /[\+\-]?[0-9]+\.[0-9]*([Ee][\+\-]?[0-9]+)?/
    | /[\+\-]?[0-9]*\.[0-9]+([Ee][\+\-]?[0-9]+)?/
    | /[0-9]+[Ee][\+\-]?[0-9]+/

# Arrays

array_literal : array_prefix? _LBRACK ( column_expr ( _COMMA column_expr )* )? _RBRACK

array_prefix : _ARRAY array_type?

array_type : _LT UNQUOTED_IDENT _GT

# Date / time

date_literal : _DATE STRING_LITERAL

time_literal : _TIME STRING_LITERAL

datetime_literal : _DATETIME STRING_LITERAL

timestamp_literal : _TIMESTAMP STRING_LITERAL

# Range

range_literal : _RANGE range_type range_value

range_type : _LT UNQUOTED_IDENT _GT

range_value : STRING_LITERAL

# Interval

interval_literal : _INTERVAL column_expr datetime_part

datetime_part : UNQUOTED_IDENT

# JSON

json_literal : _JSON STRING_LITERAL

# Structs

struct_literal : _LPAR column_expr _COMMA column_expr ( _COMMA column_expr )* _RPAR

# Boolean

boolean_literal : TRUE | FALSE

# Null

null_literal : NULL

################################################################################
# Expressions
################################################################################

# We force precedence with only one alternative per rule, in a big chain that
# runs from lowest to highest precedence
# We pull out a separate rule for all operators w / higher precedence than AND
# to deal with semantic ambiguity in `BETWEEN` and disambiguate different flavors
# of parenthesized forms
# This structure closely follows the expression tree in ZetaSQL

?column_expr: prec_higher_than_and_expr | binary_boolean_expr

?binary_boolean_expr : and_expr | column_expr _OR column_expr -> or_expr

?and_expr : and_expr _AND prec_higher_than_and_expr
    | prec_higher_than_and_expr _AND prec_higher_than_and_expr

?prec_higher_than_and_expr : unparenthesized_prec_higher_than_and_expr
    | parenthesized_expr
    | subquery

# In other words, parens used for grouping expressions, but not subqueries
parenthesized_expr : _LPAR maybe_parenthesized_not_a_query_expr _RPAR

?maybe_parenthesized_not_a_query_expr : parenthesized_expr
    | unparenthesized_prec_higher_than_and_expr
    | binary_boolean_expr

# This begins the chain of operators / atoms
?unparenthesized_prec_higher_than_and_expr : is_distinct_from_expr
    | _NOT prec_higher_than_and_expr -> not_expr

?is_distinct_from_expr : is_not_expr
    | prec_higher_than_and_expr _IS _DISTINCT _FROM prec_higher_than_and_expr

?is_not_expr : is_expr
    | prec_higher_than_and_expr _IS _NOT ( boolean_literal | null_literal )

?is_expr : not_in_expr
    | prec_higher_than_and_expr _IS ( boolean_literal | null_literal )

?not_in_expr : in_expr
    | prec_higher_than_and_expr _NOT _IN ( parenthesized_in_rhs | subquery | unnest_expr )

?parenthesized_in_rhs : parenthesized_expr | parenthesized_list

parenthesized_list : _LPAR column_expr _COMMA column_expr ( _COMMA column_expr )* _RPAR

?in_expr : not_between_expr
    | prec_higher_than_and_expr _IN ( parenthesized_in_rhs | subquery | unnest_expr )

?not_between_expr : between_expr
    | prec_higher_than_and_expr _NOT _BETWEEN prec_higher_than_and_expr _AND prec_higher_than_and_expr

?between_expr : not_qlike_expr
    | prec_higher_than_and_expr _BETWEEN prec_higher_than_and_expr _AND prec_higher_than_and_expr

?not_qlike_expr : qlike_expr
    | prec_higher_than_and_expr _NOT _LIKE qlike_quantifier ( parenthesized_list | unnest_expr )

qlike_quantifier : ANY | SOME | ALL

?qlike_expr : not_like_expr
    | prec_higher_than_and_expr _LIKE qlike_quantifier ( parenthesized_list | unnest_expr )

?not_like_expr : like_expr
    | prec_higher_than_and_expr _NOT _LIKE prec_higher_than_and_expr

?like_expr : ne_expr
    | prec_higher_than_and_expr _LIKE prec_higher_than_and_expr

?ne_expr : gte_expr
    | prec_higher_than_and_expr ( _NE | _NE_VAR ) prec_higher_than_and_expr

?gte_expr : lte_expr
    | prec_higher_than_and_expr _GTE prec_higher_than_and_expr

?lte_expr : gt_expr
    | prec_higher_than_and_expr _LTE prec_higher_than_and_expr

?gt_expr : lt_expr
    | prec_higher_than_and_expr _GT prec_higher_than_and_expr

?lt_expr : eq_expr
    | prec_higher_than_and_expr _LT prec_higher_than_and_expr

?eq_expr : bitwise_or_expr
    | prec_higher_than_and_expr _EQ prec_higher_than_and_expr

?bitwise_or_expr : bitwise_xor_expr | prec_higher_than_and_expr _PIPE prec_higher_than_and_expr

?bitwise_xor_expr : bitwise_and_expr | prec_higher_than_and_expr _CARET prec_higher_than_and_expr

?bitwise_and_expr : bitwise_shr_expr | prec_higher_than_and_expr _AMP prec_higher_than_and_expr

?bitwise_shr_expr : bitwise_shl_expr | prec_higher_than_and_expr _SHR prec_higher_than_and_expr

?bitwise_shl_expr : sub_expr | prec_higher_than_and_expr _SHL prec_higher_than_and_expr

?sub_expr : add_expr | prec_higher_than_and_expr _MINUS prec_higher_than_and_expr

?add_expr : concat_expr | prec_higher_than_and_expr _PLUS prec_higher_than_and_expr

?concat_expr : div_expr | prec_higher_than_and_expr _CONCAT prec_higher_than_and_expr

?div_expr : mul_expr | prec_higher_than_and_expr _FSLASH prec_higher_than_and_expr

?mul_expr : bitwise_not_expr_ | prec_higher_than_and_expr _STAR prec_higher_than_and_expr

?bitwise_not_expr_ : uminus_expr_ | _TILDE prec_higher_than_and_expr -> bitwise_not_expr

?uminus_expr_ : uplus_expr_ | _MINUS prec_higher_than_and_expr -> uminus_expr

?uplus_expr_ : subscript_expr | _PLUS prec_higher_than_and_expr -> uplus_expr

?subscript_expr : field_access_expr | prec_higher_than_and_expr _LBRACK column_expr _RBRACK

?field_access_expr : atom_expr | prec_higher_than_and_expr _DOT ident

# Now we don't really care about precedence anymore
?atom_expr : literal
    | function_call_expr
    | keyword_subquery_expr
    | parameter
    | ident

# Functions

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-reference
# Ref: https://github.com/lark-parser/lark/blob/master/lark/grammars/python.lark#L145-L146
function_call_expr : function_name _LPAR function_distinct? function_args? function_modifiers? _RPAR

function_name : field_access_expr

function_distinct : _DISTINCT

function_args : pos_arg ( _COMMA pos_arg )* ( _COMMA named_arg )* | named_arg ( _COMMA named_arg )*

pos_arg : column_expr

named_arg : ident _ARROW column_expr

function_modifiers : nulls_modifier? having_modifier? order_by_modifier? limit_modifier?

nulls_modifier : nulls_modifier_kind _NULLS

nulls_modifier_kind : _IGNORE -> ignore_nulls | _RESPECT -> respect_nulls

having_modifier : _HAVING having_modifier_kind column_expr

having_modifier_kind : _MIN -> having_min | _MAX -> having_max

order_by_modifier : _ORDER _BY order_by_items

order_by_items : order_by_item ( _COMMA order_by_item )*

order_by_item : column_expr order_by_item_sort? order_by_item_nulls?

order_by_item_sort : ASC | DESC

order_by_item_nulls : _NULLS ( FIRST | LAST )

limit_modifier : _LIMIT ( integer_literal | parameter )

keyword_subquery_expr : _ARRAY _LPAR query_expr _RPAR -> array_subquery_expr
    | _EXISTS _LPAR query_expr _RPAR -> exists_subquery_expr

################################################################################
# Entry point
################################################################################

?start : query

################################################################################
# Query
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#sql_syntax

?query : query_expr ( _SEMI query_expr )* _SEMI?

?query_expr : select | subquery | cte | pipe_from | pipe_expr

subquery : _LPAR query_expr _RPAR

cte : _WITH cte_item query_expr

cte_item : ident _AS subquery ( _COMMA cte_item )?

pipe_expr : pipe_start pipe_item+

?pipe_start : select | subquery | pipe_from

pipe_from : _FROM from_clause

?pipe_item : _PIPE_OP pipe_operator

################################################################################
# SELECT
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#select_list

select : _SELECT select_shape? select_list select_from?

select_shape : _AS ( STRUCT | VALUE )

# See https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#trailing_commas
select_list : select_item ( _COMMA select_item )* _COMMA?

?select_item : select_star | select_dot_star | select_expr

select_star : _STAR

select_dot_star : prec_higher_than_and_expr _DOT _STAR

select_expr : column_expr as_alias?

as_alias : [ _AS ] ident

################################################################################
# FROM
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#from_clause

?select_from : _FROM from_clause

from_clause : from_item ( _COMMA from_item )*

?from_item : path_expression as_alias? time_travel? -> from_item_table
    | subquery as_alias? -> from_item_subquery
    | from_item_unnest

# Time travel

time_travel : _FOR _SYSTEM _USCORE _TIME _AS _OF column_expr

################################################################################
# UNNEST
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#unnest_operator

from_item_unnest : from_unnest_expr from_unnest_offset_expr?

from_unnest_expr : unnest_expr as_alias?

unnest_expr : _UNNEST _LPAR column_expr _RPAR

from_unnest_offset_expr : _WITH _OFFSET as_alias?

################################################################################
# Pipe
################################################################################

?pipe_operator : pipe_select
    | pipe_extend
    | pipe_set
    | pipe_drop
    | pipe_rename
    | pipe_as
    | pipe_where
    | pipe_limit
    | pipe_agg
    | pipe_order_by
    | pipe_set_operation
    | pipe_join
    | pipe_call
    | pipe_window
    | pipe_tablesample
    | pipe_pivot
    | pipe_unpivot

# SELECT

pipe_select : _SELECT select_shape? select_list

# EXTEND

pipe_extend : _EXTEND extend_list

extend_list : extend_item ( _COMMA extend_item )* _COMMA?

extend_item : column_expr as_alias?

# SET

pipe_set : _SET set_list

set_list : set_item ( _COMMA set_item )* _COMMA?

set_item : ident _EQ column_expr

# DROP

pipe_drop : _DROP drop_list

drop_list : drop_item ( _COMMA drop_item )* _COMMA?

drop_item : ident

# RENAME

pipe_rename : _RENAME rename_list

rename_list : rename_item ( _COMMA rename_item )* _COMMA?

rename_item : ident as_alias

# AS

pipe_as : _AS ident

# WHERE

pipe_where : _WHERE column_expr

# LIMIT

pipe_limit : _LIMIT limit_value ( _OFFSET offset_value )?

limit_value : integer_literal | parameter

offset_value : integer_literal | parameter

# AGGREGATE

pipe_agg : _AGGREGATE agg_list group_by?

agg_list : agg_item ( _COMMA agg_item )* _COMMA?

agg_item : column_expr as_alias? order_by_item_sort? order_by_item_nulls?

# GROUP BY

group_by : _GROUP group_by_and_order_by? _BY grouping_items

group_by_and_order_by : _AND _ORDER

grouping_items :  grouping_item ( _COMMA grouping_item )*

grouping_item : grouping_item_empty
    | column_expr as_alias_as_required? order_by_item_sort? order_by_item_nulls?
    | rollup_list _RPAR
    | cube_list _RPAR
    | grouping_set_list _RPAR

grouping_item_empty : _LPAR _RPAR

as_alias_as_required : _AS ident

rollup_list : _ROLLUP _LPAR column_expr | rollup_list _COMMA column_expr

cube_list : _CUBE _LPAR column_expr | cube_list _COMMA column_expr

grouping_set_list : _GROUPING _SETS _LPAR grouping_set | grouping_set_list _COMMA grouping_set

grouping_set : grouping_item_empty
    | column_expr
    | rollup_list _RPAR
    | cube_list _RPAR

# ORDER BY

pipe_order_by : _ORDER _BY order_by_items

# Set operations

pipe_set_operation : set_operation | set_operation_with_criteria

set_operation : set_operation_kind set_operation_mode set_operation_modifier? set_operation_list

set_operation_with_criteria : set_operation_criteria set_operation_kind set_operation_mode set_operation_modifier set_operation_list

set_operation_kind : UNION | INTERSECT | EXCEPT

set_operation_mode : ALL | DISTINCT

set_operation_list : subquery ( _COMMA subquery )*

?set_operation_modifier : set_operation_modifier_by_name
    | set_operation_modifier_corresponding
    | set_operation_modifier_strict_corresponding

set_operation_modifier_by_name : _BY _NAME ( _ON set_operation_columns )?

set_operation_modifier_corresponding : _CORRESPONDING ( _BY set_operation_columns )?

set_operation_modifier_strict_corresponding : _STRICT _CORRESPONDING ( _BY set_operation_columns )?

set_operation_columns : _LPAR ident ( _COMMA ident )* _RPAR

set_operation_criteria : INNER | ( FULL | LEFT ) OUTER?

# JOIN

pipe_join : join | join_with_criteria

join : _JOIN from_item ( on_clause | using_clause )

on_clause : _ON column_expr

using_clause : _USING _LPAR ident ( _COMMA ident )* _RPAR

join_with_criteria : join_criteria _JOIN from_item ( on_clause | using_clause )

join_criteria : CROSS | INNER | ( FULL | LEFT | RIGHT ) OUTER?

# CALL

pipe_call : _CALL function_call_expr as_alias?

# WINDOW

pipe_window : _WINDOW window_expr_list

window_expr_list : window_expr ( _COMMA window_expr )*

window_expr : function_call_expr _OVER _LPAR window_spec _RPAR as_alias?

window_spec : window_partition_by? window_order_by? window_frame?

window_partition_by : _PARTITION _BY column_expr ( _COMMA column_expr )*

window_order_by : _ORDER _BY order_by_items

window_frame : window_frame_kind ( window_frame_start | _BETWEEN window_frame_between )

window_frame_kind : ROWS | RANGE

window_frame_start : window_frame_unbounded_preceding
    | window_frame_numeric_preceding
    | window_frame_current_row

window_frame_unbounded_preceding : _UNBOUNDED _PRECEDING

window_frame_numeric_preceding : column_expr _PRECEDING

window_frame_current_row : _CURRENT _ROW

window_frame_between : window_frame_between_unbounded_preceding
    | window_frame_between_numeric_preceding
    | window_frame_between_current_row
    | window_frame_between_numeric_following

window_frame_between_unbounded_preceding : window_frame_unbounded_preceding _AND window_frame_between_end_a

window_frame_between_numeric_preceding : window_frame_numeric_preceding _AND window_frame_between_end_a

window_frame_between_current_row : window_frame_current_row _AND window_frame_between_end_b

window_frame_between_numeric_following : window_frame_numeric_following _AND window_frame_between_end_c

window_frame_numeric_following : column_expr _FOLLOWING

?window_frame_between_end_a : window_frame_numeric_preceding
    | window_frame_current_row
    | window_frame_numeric_following
    | window_frame_unbounded_following

window_frame_unbounded_following : _UNBOUNDED _FOLLOWING

?window_frame_between_end_b : window_frame_current_row
    | window_frame_numeric_following
    | window_frame_unbounded_following

?window_frame_between_end_c : window_frame_numeric_following
    | window_frame_unbounded_following

# TABLESAMPLE

pipe_tablesample : _TABLESAMPLE _SYSTEM _LPAR tablesample_perc _RPAR

tablesample_perc : ( integer_literal | parameter ) _PERCENT

# PIVOT

pipe_pivot : _PIVOT _LPAR pivot_clause _RPAR as_alias?

pivot_clause : function_call_expr _FOR ident _IN _LPAR pivot_value_list _RPAR

pivot_value_list : column_expr ( _COMMA column_expr )+

# UNPIVOT

pipe_unpivot : _UNPIVOT _LPAR unpivot_clause _RPAR as_alias?

unpivot_clause : unpivot_values_column _FOR unpivot_name_column _IN unpivot_column_list

unpivot_values_column : ident

unpivot_name_column : ident

unpivot_column_list : _LPAR ident ( _COMMA ident )* _RPAR