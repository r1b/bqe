%import common (CNAME, INT, WS)

# TODO: See ZetaSQL for a more complete definition of WS
%ignore WS

################################################################################
# Punctuation
################################################################################

_AMP : "&"
_ARROW : "=>"
_AT : "@"
BACKTICK : "`"
_CARET : "^"
_COMMA : ","
_CONCAT : "||"
_DOT : "."
DQUOT : "\""
_EQ : "="
_FSLASH : "/"
_GT : ">"
_GTE : ">="
_LBRACK : "["
_LPAR : "("
_LT : "<"
_LTE : "<="
_MINUS : "-"
MINUS : "-"
_NE : "!="
_NE_VAR : "<>"
_PERC : "%"
_PIPE : "|"
_PLUS : "+"
PLUS : "+"
_RBRACK : "]"
_RPAR : ")"
SQUOT : "'"
_SHL : "<<"
_SHR : ">>"
_STAR : "*"
_TILDE : "~"
_USCORE : "_"

################################################################################
# Keywords
################################################################################

# All keywords are case-insensitive

_AND : "AND"i
ANY : "ANY"i
ALL : "ALL"i
_ARRAY : "ARRAY"i
_AS : "AS"i
_BETWEEN : "BETWEEN"i
_BIGNUMERIC : "BIGNUMERIC"i
_DATE : "DATE"i
_DATETIME : "DATETIME"i
_DISTINCT : "DISTINCT"i
DISTINCT : "DISTINCT"i
FALSE : "FALSE"i
_FOR : "FOR"i
_FROM : "FROM"i
_IN : "IN"i
_INTERVAL : "INTERVAL"i
_IS : "IS"i
_JSON : "JSON"i
_OF : "OF"i
_OR : "OR"i
_OFFSET : "OFFSET"i
_NOT : "NOT"i
NULL : "NULL"i
_NUMERIC : "NUMERIC"i
_RANGE : "RANGE"i
_SELECT : "SELECT"i
SOME : "SOME"i
STRUCT : "STRUCT"i
_SYSTEM : "SYSTEM"i
_TIME : "TIME"i
_TIMESTAMP : "TIMESTAMP"i
TRUE : "TRUE"i
_UNNEST : "UNNEST"i
VALUE : "VALUE"i
_WITH : "WITH"i

################################################################################
# Identifiers
################################################################################

# TODO: Flesh this out with context from ZetaSQL
# Ref: https://github.com/google/zetasql/blob/master/zetasql/parser/zetasql.tm
# Ref: https://github.com/google/zetasql/blob/master/zetasql/parser/flex_tokenizer.l

# TODO: Support escape sequences
# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#escape_sequences

UNQUOTED_IDENT : CNAME
QUOTED_IDENT : BACKTICK /[^`]+/ BACKTICK

ident : UNQUOTED_IDENT | QUOTED_IDENT

path_expression : ident | path_expression _DOT ident

parameter : _AT UNQUOTED_IDENT

################################################################################
# Literals
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#literals

literal : string_literal
    | bytes_literal
    | integer_literal
    | numeric_literal
    | bignumeric_literal
    | float_literal
    | array_literal
    | struct_literal
    | date_literal
    | time_literal
    | datetime_literal
    | timestamp_literal
    | range_literal
    | interval_literal
    | json_literal

# Strings

# TODO: This requires transformer cleanup
# TODO: Handle escape characters

string_literal : STRING_LITERAL

STRING_LITERAL : _STRING_LITERAL_PREFIX? _DQUOT_STRING_LITERAL
    | _STRING_LITERAL_PREFIX? _DQUOT3_STRING_LITERAL
    | _STRING_LITERAL_PREFIX? _SQUOT_STRING_LITERAL
    | _STRING_LITERAL_PREFIX? _SQUOT3_STRING_LITERAL

_STRING_LITERAL_PREFIX : "r"i

_DQUOT_STRING_LITERAL : DQUOT _STRING_LITERAL_INNER DQUOT

_DQUOT3_STRING_LITERAL : DQUOT DQUOT DQUOT _STRING_LITERAL_INNER DQUOT DQUOT DQUOT

_SQUOT_STRING_LITERAL : SQUOT _STRING_LITERAL_INNER SQUOT

_SQUOT3_STRING_LITERAL : SQUOT SQUOT SQUOT _STRING_LITERAL_INNER SQUOT SQUOT SQUOT

_STRING_LITERAL_INNER : /.*?/

# Bytes

bytes_literal : BYTES_LITERAL

BYTES_LITERAL : _BYTES_LITERAL_PREFIX _DQUOT_BYTES_LITERAL
    | _BYTES_LITERAL_PREFIX _DQUOT3_BYTES_LITERAL
    | _BYTES_LITERAL_PREFIX _SQUOT_BYTES_LITERAL
    | _BYTES_LITERAL_PREFIX _SQUOT3_BYTES_LITERAL

_BYTES_LITERAL_PREFIX : "rb"i | "br"i | "b"i

_DQUOT_BYTES_LITERAL : DQUOT _BYTES_LITERAL_INNER DQUOT

_DQUOT3_BYTES_LITERAL : DQUOT DQUOT DQUOT _BYTES_LITERAL_INNER DQUOT DQUOT DQUOT

_SQUOT_BYTES_LITERAL : SQUOT _BYTES_LITERAL_INNER SQUOT

_SQUOT3_BYTES_LITERAL : SQUOT SQUOT SQUOT _BYTES_LITERAL_INNER SQUOT SQUOT SQUOT

_BYTES_LITERAL_INNER : /.*?/

# Integers

integer_literal : INTEGER_LITERAL

INTEGER_LITERAL : /[\+\-]?(0[Xx][0-9A-Fa-f]+|[0-9]+)/

# Numeric

numeric_literal : _NUMERIC STRING_LITERAL

bignumeric_literal : _BIGNUMERIC STRING_LITERAL

# Floats

float_literal : FLOAT_LITERAL

FLOAT_LITERAL : /[\+\-]?[0-9]+\.[0-9]*([Ee][\+\-]?[0-9]+)?/
    | /[\+\-]?[0-9]*\.[0-9]+([Ee][\+\-]?[0-9]+)?/
    | /[0-9]+[Ee][\+\-]?[0-9]+/

# Arrays

array_literal : array_prefix? _LBRACK ( column_expr ( _COMMA column_expr )* )? _RBRACK

array_prefix : _ARRAY array_type?

array_type : _LT UNQUOTED_IDENT _GT

# Date / time

date_literal : _DATE STRING_LITERAL

time_literal : _TIME STRING_LITERAL

datetime_literal : _DATETIME STRING_LITERAL

timestamp_literal : _TIMESTAMP STRING_LITERAL

# Range

range_literal : _RANGE range_type STRING_LITERAL

range_type : _LT UNQUOTED_IDENT _GT

# Interval

interval_literal : _INTERVAL column_expr datetime_part

datetime_part : UNQUOTED_IDENT

# JSON

json_literal : _JSON STRING_LITERAL

# Structs
# Struct literals are used in some common forms like:
# - GROUP BY GROUPING SETS ((a,b), c)
# - (foo, bar) IN subquery

struct_literal : _LPAR column_expr _COMMA column_expr ( _COMMA column_expr )* _RPAR

################################################################################
# Expressions
################################################################################

# We force precedence with only one alternative per rule, in a big chain that
# runs from lowest to highest precedence
# We pull out a separate rule for all operators w / higher precedence than AND
# to deal with semantic ambiguity in `BETWEEN` and disambiguate different flavors
# of parenthesized forms
# This structure closely follows the expression tree in ZetaSQL

?column_expr: prec_higher_than_and_expr | binary_boolean_expr

?binary_boolean_expr : and_expr | column_expr _OR column_expr -> or_expr

?and_expr : and_expr _AND prec_higher_than_and_expr
    | prec_higher_than_and_expr _AND prec_higher_than_and_expr

?prec_higher_than_and_expr : unparenthesized_prec_higher_than_and_expr
    | parenthesized_not_a_query_expr
    | subquery

# In other words, parens used for grouping expressions, but not subqueries
parenthesized_not_a_query_expr : _LPAR maybe_parenthesized_not_a_query_expr _RPAR

?maybe_parenthesized_not_a_query_expr : parenthesized_not_a_query_expr
    | unparenthesized_prec_higher_than_and_expr
    | binary_boolean_expr

# This begins the chain of operators / atoms
?unparenthesized_prec_higher_than_and_expr : is_distinct_from_expr
    | _NOT prec_higher_than_and_expr -> not_expr

?is_distinct_from_expr : is_not_expr
    | prec_higher_than_and_expr _IS _DISTINCT _FROM prec_higher_than_and_expr

?is_not_expr : is_expr
    | prec_higher_than_and_expr _IS _NOT ( TRUE | FALSE | NULL )

?is_expr : not_in_expr
    | prec_higher_than_and_expr _IS ( TRUE | FALSE | NULL )

?not_in_expr : in_expr
    | prec_higher_than_and_expr _NOT _IN prec_higher_than_and_expr

?in_expr : not_between_expr
    | prec_higher_than_and_expr _IN prec_higher_than_and_expr

?not_between_expr : between_expr
    | prec_higher_than_and_expr _NOT _BETWEEN prec_higher_than_and_expr _AND prec_higher_than_and_expr

?between_expr : qlike_expr
    | prec_higher_than_and_expr _BETWEEN prec_higher_than_and_expr _AND prec_higher_than_and_expr

?qlike_expr : not_like_expr
    | prec_higher_than_and_expr _PERC ( ANY | SOME | ALL ) prec_higher_than_and_expr

?not_like_expr : like_expr
    | prec_higher_than_and_expr _NOT _PERC prec_higher_than_and_expr

?like_expr : ne_expr
    | prec_higher_than_and_expr _PERC prec_higher_than_and_expr

?ne_expr : gte_expr
    | prec_higher_than_and_expr ( _NE | _NE_VAR ) prec_higher_than_and_expr

?gte_expr : lte_expr
    | prec_higher_than_and_expr _GTE prec_higher_than_and_expr

?lte_expr : gt_expr
    | prec_higher_than_and_expr _LTE prec_higher_than_and_expr

?gt_expr : lt_expr
    | prec_higher_than_and_expr _GT prec_higher_than_and_expr

?lt_expr : eq_expr
    | prec_higher_than_and_expr _LT prec_higher_than_and_expr

?eq_expr : bitwise_or_expr
    | prec_higher_than_and_expr _EQ prec_higher_than_and_expr

?bitwise_or_expr : bitwise_xor_expr | prec_higher_than_and_expr _PIPE prec_higher_than_and_expr

?bitwise_xor_expr : bitwise_and_expr | prec_higher_than_and_expr _CARET prec_higher_than_and_expr

?bitwise_and_expr : bitwise_shr_expr | prec_higher_than_and_expr _AMP prec_higher_than_and_expr

?bitwise_shr_expr : bitwise_shl_expr | prec_higher_than_and_expr _SHR prec_higher_than_and_expr

?bitwise_shl_expr : sub_expr | prec_higher_than_and_expr _SHL prec_higher_than_and_expr

?sub_expr : add_expr | prec_higher_than_and_expr _MINUS prec_higher_than_and_expr

?add_expr : concat_expr | prec_higher_than_and_expr _PLUS prec_higher_than_and_expr

?concat_expr : div_expr | prec_higher_than_and_expr _CONCAT prec_higher_than_and_expr

?div_expr : mul_expr | prec_higher_than_and_expr _FSLASH prec_higher_than_and_expr

?mul_expr : bitwise_not_expr | prec_higher_than_and_expr _STAR prec_higher_than_and_expr

?bitwise_not_expr : uminus_expr | _TILDE prec_higher_than_and_expr

?uminus_expr : uplus_expr | _MINUS prec_higher_than_and_expr

?uplus_expr : subscript_expr | _PLUS prec_higher_than_and_expr

?subscript_expr : field_access_expr | prec_higher_than_and_expr _LBRACK column_expr _RBRACK

?field_access_expr : atom_expr | prec_higher_than_and_expr _DOT ident

# Now we don't really care about precedence anymore
# TODO: Handle EXISTS(...)
?atom_expr : literal
    | function_call_expr
    | parameter # TODO: I don't think we need this - its just an ident
    | ident

# Functions

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-reference
# Ref: https://github.com/lark-parser/lark/blob/master/lark/grammars/python.lark#L145-L146
# TODO: Transformer cleanup for column_expr -> function name
function_call_expr : field_access_expr _LPAR function_args? _RPAR

function_args : pos_arg ( _COMMA pos_arg )* ( _COMMA named_arg )* | named_arg ( _COMMA named_arg )*

pos_arg : column_expr

named_arg : ident _ARROW column_expr

################################################################################
# Entry point
################################################################################

start : query_statement

################################################################################
# Query
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#sql_syntax

query_statement : query_expr

query_expr : select | subquery | cte

subquery : _LPAR query_expr _RPAR

cte : _WITH cte_item query_expr

cte_item : ident _AS subquery ( _COMMA cte_item )?

################################################################################
# SELECT
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#select_list

select : _SELECT select_shape? select_list select_from?

select_shape : _AS ( STRUCT | VALUE )

# See https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#trailing_commas
select_list : select_item ( _COMMA select_item )* _COMMA?

select_item : select_star | select_dot_star | select_expr

select_star : _STAR

select_dot_star : prec_higher_than_and_expr _DOT _STAR

select_expr : column_expr as_alias?

alias_expr : column_expr _AS ident

as_alias : [ _AS ] ident

################################################################################
# FROM
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#from_clause

select_from : _FROM from_clause

from_clause : from_item | from_clause _COMMA from_item

from_item : path_expression as_alias? time_travel? -> from_item_table
    | subquery as_alias? -> from_item_subquery
    | from_item_unnest

# Time travel

time_travel : _FOR _SYSTEM _USCORE _TIME _AS _OF column_expr

################################################################################
# UNNEST
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#unnest_operator

from_item_unnest : unnest_expression unnest_expression_with_offset?

unnest_expression : _UNNEST _LPAR column_expr _RPAR as_alias?

unnest_expression_with_offset : _WITH _OFFSET as_alias?