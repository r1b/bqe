%import common (CNAME, INT, WS)

# TODO: See ZetaSQL for a more complete definition of WS
%ignore WS

################################################################################
# Punctuation
################################################################################

_ARROW : "=>"
BACKTICK : "`"
COLON : ":"
_COMMA : ","
DASH : "-"
_DOT : "."
DQUOT : "\""
_LBRACK : "["
_LPAR : "("
MINUS : "-"
PLUS : "+"
_RBRACK : "]"
_RPAR : ")"
SLASH : "/"
SQUOT : "'"
_STAR : "*"

################################################################################
# Keywords
################################################################################

# All keywords are case-insensitive

ALL : "ALL"i
_AS : "AS"i
DISTINCT : "DISTINCT"i
_EXCEPT : "EXCEPT"i
_FROM : "FROM"i
_OFFSET : "OFFSET"i
_REPLACE : "REPLACE"i
_SELECT : "SELECT"i
_UNNEST : "UNNEST"i
WHERE : "WHERE"i
_WITH : "WITH"i

################################################################################
# Identifiers
################################################################################

# TODO: Flesh this out with context from ZetaSQL
# Ref: https://github.com/google/zetasql/blob/master/zetasql/parser/zetasql.tm
# Ref: https://github.com/google/zetasql/blob/master/zetasql/parser/flex_tokenizer.l

# TODO: Support escape sequences
# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#escape_sequences

UNQUOTED_IDENT : CNAME
QUOTED_IDENT : BACKTICK /[^`]+/ BACKTICK

ident : UNQUOTED_IDENT | QUOTED_IDENT

# This is quite foundational, starting with https://github.com/google/zetasql/blob/master/zetasql/parser/zetasql.tm#L9262
path_expression : ident | path_expression _DOT ident

################################################################################
# Literals
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#literals

literal : string_literal
#   | bytes_literal
    | integer_literal
#   | numeric_literal
#   | bignumeric_literal
#   | float_literal
#   | array_literal
#   | struct_literal
#   | date_literal
#   | time_literal
#   | datetime_literal
#   | range_literal
#   | interval_literal
#   | json_literal

# Strings

# TODO: This requires transformer cleanup
# TODO: Handle escape characters

string_literal : STRING_LITERAL

STRING_LITERAL : ("R" | "r")? _DQUOT_STRING_LITERAL
    | ("R" | "r")? _DQUOT3_STRING_LITERAL
    | ("R" | "r")? _SQUOT_STRING_LITERAL
    | ("R" | "r")? _SQUOT3_STRING_LITERAL

_DQUOT_STRING_LITERAL : DQUOT _STRING_LITERAL_INNER DQUOT

_DQUOT3_STRING_LITERAL : DQUOT DQUOT DQUOT _STRING_LITERAL_INNER DQUOT DQUOT DQUOT

_SQUOT_STRING_LITERAL : SQUOT _STRING_LITERAL_INNER SQUOT

_SQUOT3_STRING_LITERAL : SQUOT SQUOT SQUOT _STRING_LITERAL_INNER SQUOT SQUOT SQUOT

_STRING_LITERAL_INNER : /.*?/

# Integers

integer_literal : INTEGER_LITERAL

INTEGER_LITERAL : /[\+\-]?(0[Xx][0-9A-Fa-f]+|[0-9]+)/

################################################################################
# Expressions
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/operators#operator_precedence
# Ref: https://github.com/google/zetasql/blob/master/zetasql/parser/zetasql.tm#L8795

# TODO: This requires transformer cleanup
# Its necessary to use left-recursion to remove ambiguity in dotted path expressions

column_expr : literal
    | subquery
    | function_call_expr
    | ident
    | column_expr _DOT ident
    | subscript_expr
#   | plus
#   | minus
#   | bitnot
#   | mul
#   | div
#   | concat
#   | add
#   | sub
#   | shl
#   | shr
#   | bitand
#   | bitxor
#   | bitor
#   | eq
#   | lt
#   | gt
#   | lte
#   | gte
#   | ne
#   | like
#   | qlike
#   | between
#   | in
#   | isnull
#   | istrue
#   | isfalse
#   | not
#   | and
#   | or

# Functions

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-reference
# Ref: https://github.com/lark-parser/lark/blob/master/lark/grammars/python.lark#L145-L146
# TODO: Transformer cleanup for column_expr -> function name
function_call_expr : column_expr _LPAR function_args? _RPAR

function_args : pos_arg ( _COMMA pos_arg )* ( _COMMA named_arg )* | named_arg ( _COMMA named_arg )*

pos_arg : column_expr

named_arg : ident _ARROW column_expr

# Operators

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/operators#array_subscript_operator
# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/operators#struct_subscript_operator
# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/operators#json_subscript_operator

subscript_expr : column_expr _LBRACK column_expr _RBRACK

################################################################################
# Entry point
################################################################################

start : query_statement

################################################################################
# Query
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#sql_syntax

query_statement : query_expr

query_expr : select | subquery
#   [ WITH [ RECURSIVE ] { non_recursive_cte | recursive_cte }[, ...] ]
#   select | _LPAR query_expr _RPAR # | set_operation
#   [ ORDER BY expression [{ ASC | DESC }] [, ...] ]
#   [ LIMIT count [ OFFSET skip_rows ] ]

select : _SELECT select_mode? select_list select_from?
#   [ WITH differential_privacy_clause ]
#   SELECT
#   [ ALL | DISTINCT ]
#   [ _AS { STRUCT | VALUE } ]
#   select_list
#   [ FROM from_clause ( _COMMA from_clause )* ]
#   [ WHERE bool_expression ]
#   [ GROUP BY group_by_specification ]
#   [ HAVING bool_expression ]
#   [ QUALIFY bool_expression ]
#   [ WINDOW window_clause ]

subquery : _LPAR query_expr _RPAR

select_mode : ALL | DISTINCT

################################################################################
# SELECT
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#select_list

# See https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#trailing_commas
select_list : select_item ( _COMMA select_item )* _COMMA?

select_item : select_star | select_dot_star | select_expr

select_star : _STAR select_star_except? select_star_replace?

select_dot_star : column_expr _DOT _STAR select_star_except? select_star_replace?

select_star_except : _EXCEPT _LPAR ident ( _COMMA ident )* _RPAR

select_star_replace : _REPLACE _LPAR alias_expr ( _COMMA alias_expr )* _RPAR

select_expr : column_expr as_alias?

alias_expr : column_expr _AS ident

as_alias : [ _AS ] ident

################################################################################
# FROM
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#from_clause

select_from : _FROM from_clause

from_clause : from_item | from_clause _COMMA from_item
#   from_item
#   [ pivot_operator | unpivot_operator ]
#   [ tablesample_operator ]

from_item : path_expression as_alias? -> from_item_table
#   table_name [ as_alias ] [ FOR SYSTEM_TIME AS OF timestamp_expression ]
#   | ( join_operation | LPAR join_operation RPAR )
    | subquery as_alias? -> from_item_subquery
#   | field_path
    | from_item_unnest
#   | cte_name [ as_alias ]

################################################################################
# UNNEST
################################################################################

# Ref: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#unnest_operator

from_item_unnest : unnest_expression unnest_expression_zip_mode?

unnest_expression : _UNNEST _LPAR column_expr _RPAR as_alias?

unnest_expression_zip_mode : _WITH _OFFSET as_alias?